// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class GlobalStat extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save GlobalStat entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type GlobalStat must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("GlobalStat", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): GlobalStat | null {
    return changetype<GlobalStat | null>(
      store.get_in_block("GlobalStat", id.toHexString())
    );
  }

  static load(id: Bytes): GlobalStat | null {
    return changetype<GlobalStat | null>(
      store.get("GlobalStat", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get totalExecutedBundlesCount(): BigInt {
    let value = this.get("totalExecutedBundlesCount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalExecutedBundlesCount(value: BigInt) {
    this.set("totalExecutedBundlesCount", Value.fromBigInt(value));
  }

  get totalExecutedBundlesWithRefundCount(): BigInt {
    let value = this.get("totalExecutedBundlesWithRefundCount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalExecutedBundlesWithRefundCount(value: BigInt) {
    this.set("totalExecutedBundlesWithRefundCount", Value.fromBigInt(value));
  }

  get totalExecutedFastBidsCount(): BigInt {
    let value = this.get("totalExecutedFastBidsCount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalExecutedFastBidsCount(value: BigInt) {
    this.set("totalExecutedFastBidsCount", Value.fromBigInt(value));
  }

  get totalValidatorsPaid(): BigInt {
    let value = this.get("totalValidatorsPaid");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalValidatorsPaid(value: BigInt) {
    this.set("totalValidatorsPaid", Value.fromBigInt(value));
  }

  get totalUniqueSearchers(): BigInt {
    let value = this.get("totalUniqueSearchers");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalUniqueSearchers(value: BigInt) {
    this.set("totalUniqueSearchers", Value.fromBigInt(value));
  }

  get hourlyCollectionSnapshotGlobal(): HourlyCollectionSnapshotGlobalLoader {
    return new HourlyCollectionSnapshotGlobalLoader(
      "GlobalStat",
      this.get("id")!
        .toBytes()
        .toHexString(),
      "hourlyCollectionSnapshotGlobal"
    );
  }

  get dailyCollectionSnapshotGlobal(): DailyCollectionSnapshotGlobalLoader {
    return new DailyCollectionSnapshotGlobalLoader(
      "GlobalStat",
      this.get("id")!
        .toBytes()
        .toHexString(),
      "dailyCollectionSnapshotGlobal"
    );
  }

  get weeklyCollectionSnapshotGlobal(): WeeklyCollectionSnapshotGlobalLoader {
    return new WeeklyCollectionSnapshotGlobalLoader(
      "GlobalStat",
      this.get("id")!
        .toBytes()
        .toHexString(),
      "weeklyCollectionSnapshotGlobal"
    );
  }
}

export class Collection extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Collection entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Collection must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Collection", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Collection | null {
    return changetype<Collection | null>(store.get_in_block("Collection", id));
  }

  static load(id: string): Collection | null {
    return changetype<Collection | null>(store.get("Collection", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): i32 {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set timestamp(value: i32) {
    this.set("timestamp", Value.fromI32(value));
  }

  get rangeVolume(): BigInt {
    let value = this.get("rangeVolume");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set rangeVolume(value: BigInt) {
    this.set("rangeVolume", Value.fromBigInt(value));
  }

  get validators(): Array<Bytes> {
    let value = this.get("validators");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytesArray();
    }
  }

  set validators(value: Array<Bytes>) {
    this.set("validators", Value.fromBytesArray(value));
  }

  get rangeTransactions(): i32 {
    let value = this.get("rangeTransactions");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set rangeTransactions(value: i32) {
    this.set("rangeTransactions", Value.fromI32(value));
  }

  get topBid(): BigInt {
    let value = this.get("topBid");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set topBid(value: BigInt) {
    this.set("topBid", Value.fromBigInt(value));
  }
}

export class HourlyCollectionSnapshotGlobal extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save HourlyCollectionSnapshotGlobal entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type HourlyCollectionSnapshotGlobal must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("HourlyCollectionSnapshotGlobal", id.toString(), this);
    }
  }

  static loadInBlock(id: string): HourlyCollectionSnapshotGlobal | null {
    return changetype<HourlyCollectionSnapshotGlobal | null>(
      store.get_in_block("HourlyCollectionSnapshotGlobal", id)
    );
  }

  static load(id: string): HourlyCollectionSnapshotGlobal | null {
    return changetype<HourlyCollectionSnapshotGlobal | null>(
      store.get("HourlyCollectionSnapshotGlobal", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get target(): Bytes {
    let value = this.get("target");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set target(value: Bytes) {
    this.set("target", Value.fromBytes(value));
  }

  get bundlesCollection(): string {
    let value = this.get("bundlesCollection");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set bundlesCollection(value: string) {
    this.set("bundlesCollection", Value.fromString(value));
  }

  get bundlesWithRefundCollection(): string {
    let value = this.get("bundlesWithRefundCollection");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set bundlesWithRefundCollection(value: string) {
    this.set("bundlesWithRefundCollection", Value.fromString(value));
  }

  get fastBidsCollection(): string {
    let value = this.get("fastBidsCollection");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set fastBidsCollection(value: string) {
    this.set("fastBidsCollection", Value.fromString(value));
  }
}

export class DailyCollectionSnapshotGlobal extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save DailyCollectionSnapshotGlobal entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type DailyCollectionSnapshotGlobal must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("DailyCollectionSnapshotGlobal", id.toString(), this);
    }
  }

  static loadInBlock(id: string): DailyCollectionSnapshotGlobal | null {
    return changetype<DailyCollectionSnapshotGlobal | null>(
      store.get_in_block("DailyCollectionSnapshotGlobal", id)
    );
  }

  static load(id: string): DailyCollectionSnapshotGlobal | null {
    return changetype<DailyCollectionSnapshotGlobal | null>(
      store.get("DailyCollectionSnapshotGlobal", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get target(): Bytes {
    let value = this.get("target");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set target(value: Bytes) {
    this.set("target", Value.fromBytes(value));
  }

  get bundlesCollection(): string {
    let value = this.get("bundlesCollection");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set bundlesCollection(value: string) {
    this.set("bundlesCollection", Value.fromString(value));
  }

  get bundlesWithRefundCollection(): string {
    let value = this.get("bundlesWithRefundCollection");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set bundlesWithRefundCollection(value: string) {
    this.set("bundlesWithRefundCollection", Value.fromString(value));
  }

  get fastBidsCollection(): string {
    let value = this.get("fastBidsCollection");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set fastBidsCollection(value: string) {
    this.set("fastBidsCollection", Value.fromString(value));
  }
}

export class WeeklyCollectionSnapshotGlobal extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save WeeklyCollectionSnapshotGlobal entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type WeeklyCollectionSnapshotGlobal must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("WeeklyCollectionSnapshotGlobal", id.toString(), this);
    }
  }

  static loadInBlock(id: string): WeeklyCollectionSnapshotGlobal | null {
    return changetype<WeeklyCollectionSnapshotGlobal | null>(
      store.get_in_block("WeeklyCollectionSnapshotGlobal", id)
    );
  }

  static load(id: string): WeeklyCollectionSnapshotGlobal | null {
    return changetype<WeeklyCollectionSnapshotGlobal | null>(
      store.get("WeeklyCollectionSnapshotGlobal", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get target(): Bytes {
    let value = this.get("target");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set target(value: Bytes) {
    this.set("target", Value.fromBytes(value));
  }

  get bundlesCollection(): string {
    let value = this.get("bundlesCollection");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set bundlesCollection(value: string) {
    this.set("bundlesCollection", Value.fromString(value));
  }

  get bundlesWithRefundCollection(): string {
    let value = this.get("bundlesWithRefundCollection");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set bundlesWithRefundCollection(value: string) {
    this.set("bundlesWithRefundCollection", Value.fromString(value));
  }

  get fastBidsCollection(): string {
    let value = this.get("fastBidsCollection");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set fastBidsCollection(value: string) {
    this.set("fastBidsCollection", Value.fromString(value));
  }
}

export class HourlyValidatorSnapshot extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save HourlyValidatorSnapshot entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type HourlyValidatorSnapshot must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("HourlyValidatorSnapshot", id.toString(), this);
    }
  }

  static loadInBlock(id: string): HourlyValidatorSnapshot | null {
    return changetype<HourlyValidatorSnapshot | null>(
      store.get_in_block("HourlyValidatorSnapshot", id)
    );
  }

  static load(id: string): HourlyValidatorSnapshot | null {
    return changetype<HourlyValidatorSnapshot | null>(
      store.get("HourlyValidatorSnapshot", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get target(): Bytes {
    let value = this.get("target");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set target(value: Bytes) {
    this.set("target", Value.fromBytes(value));
  }

  get bundlesCollection(): string {
    let value = this.get("bundlesCollection");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set bundlesCollection(value: string) {
    this.set("bundlesCollection", Value.fromString(value));
  }

  get bundlesWithRefundCollection(): string {
    let value = this.get("bundlesWithRefundCollection");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set bundlesWithRefundCollection(value: string) {
    this.set("bundlesWithRefundCollection", Value.fromString(value));
  }

  get fastBidsCollection(): string {
    let value = this.get("fastBidsCollection");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set fastBidsCollection(value: string) {
    this.set("fastBidsCollection", Value.fromString(value));
  }
}

export class DailyValidatorSnapshot extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save DailyValidatorSnapshot entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type DailyValidatorSnapshot must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("DailyValidatorSnapshot", id.toString(), this);
    }
  }

  static loadInBlock(id: string): DailyValidatorSnapshot | null {
    return changetype<DailyValidatorSnapshot | null>(
      store.get_in_block("DailyValidatorSnapshot", id)
    );
  }

  static load(id: string): DailyValidatorSnapshot | null {
    return changetype<DailyValidatorSnapshot | null>(
      store.get("DailyValidatorSnapshot", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get target(): Bytes {
    let value = this.get("target");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set target(value: Bytes) {
    this.set("target", Value.fromBytes(value));
  }

  get bundlesCollection(): string {
    let value = this.get("bundlesCollection");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set bundlesCollection(value: string) {
    this.set("bundlesCollection", Value.fromString(value));
  }

  get bundlesWithRefundCollection(): string {
    let value = this.get("bundlesWithRefundCollection");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set bundlesWithRefundCollection(value: string) {
    this.set("bundlesWithRefundCollection", Value.fromString(value));
  }

  get fastBidsCollection(): string {
    let value = this.get("fastBidsCollection");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set fastBidsCollection(value: string) {
    this.set("fastBidsCollection", Value.fromString(value));
  }
}

export class WeeklyValidatorSnapshot extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save WeeklyValidatorSnapshot entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type WeeklyValidatorSnapshot must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("WeeklyValidatorSnapshot", id.toString(), this);
    }
  }

  static loadInBlock(id: string): WeeklyValidatorSnapshot | null {
    return changetype<WeeklyValidatorSnapshot | null>(
      store.get_in_block("WeeklyValidatorSnapshot", id)
    );
  }

  static load(id: string): WeeklyValidatorSnapshot | null {
    return changetype<WeeklyValidatorSnapshot | null>(
      store.get("WeeklyValidatorSnapshot", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get target(): Bytes {
    let value = this.get("target");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set target(value: Bytes) {
    this.set("target", Value.fromBytes(value));
  }

  get bundlesCollection(): string {
    let value = this.get("bundlesCollection");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set bundlesCollection(value: string) {
    this.set("bundlesCollection", Value.fromString(value));
  }

  get bundlesWithRefundCollection(): string {
    let value = this.get("bundlesWithRefundCollection");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set bundlesWithRefundCollection(value: string) {
    this.set("bundlesWithRefundCollection", Value.fromString(value));
  }

  get fastBidsCollection(): string {
    let value = this.get("fastBidsCollection");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set fastBidsCollection(value: string) {
    this.set("fastBidsCollection", Value.fromString(value));
  }
}

export class Searcher extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Searcher entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type Searcher must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Searcher", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): Searcher | null {
    return changetype<Searcher | null>(
      store.get_in_block("Searcher", id.toHexString())
    );
  }

  static load(id: Bytes): Searcher | null {
    return changetype<Searcher | null>(store.get("Searcher", id.toHexString()));
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get address(): Bytes {
    let value = this.get("address");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set address(value: Bytes) {
    this.set("address", Value.fromBytes(value));
  }

  get bundlesLanded(): BigInt {
    let value = this.get("bundlesLanded");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set bundlesLanded(value: BigInt) {
    this.set("bundlesLanded", Value.fromBigInt(value));
  }

  get bundlesWithRefundLanded(): BigInt {
    let value = this.get("bundlesWithRefundLanded");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set bundlesWithRefundLanded(value: BigInt) {
    this.set("bundlesWithRefundLanded", Value.fromBigInt(value));
  }

  get fastBidsLanded(): BigInt {
    let value = this.get("fastBidsLanded");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set fastBidsLanded(value: BigInt) {
    this.set("fastBidsLanded", Value.fromBigInt(value));
  }

  get totalTipped(): BigInt {
    let value = this.get("totalTipped");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalTipped(value: BigInt) {
    this.set("totalTipped", Value.fromBigInt(value));
  }

  get totalBundlesTipped(): BigInt {
    let value = this.get("totalBundlesTipped");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalBundlesTipped(value: BigInt) {
    this.set("totalBundlesTipped", Value.fromBigInt(value));
  }

  get totalBundlesWithRefundTipped(): BigInt {
    let value = this.get("totalBundlesWithRefundTipped");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalBundlesWithRefundTipped(value: BigInt) {
    this.set("totalBundlesWithRefundTipped", Value.fromBigInt(value));
  }

  get totalFastBidsTipped(): BigInt {
    let value = this.get("totalFastBidsTipped");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalFastBidsTipped(value: BigInt) {
    this.set("totalFastBidsTipped", Value.fromBigInt(value));
  }

  get lastBundleLandedTimestamp(): i32 {
    let value = this.get("lastBundleLandedTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set lastBundleLandedTimestamp(value: i32) {
    this.set("lastBundleLandedTimestamp", Value.fromI32(value));
  }

  get lastBundleWithRefundLandedTimestamp(): i32 {
    let value = this.get("lastBundleWithRefundLandedTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set lastBundleWithRefundLandedTimestamp(value: i32) {
    this.set("lastBundleWithRefundLandedTimestamp", Value.fromI32(value));
  }

  get lastFastBidLandedTimestamp(): i32 {
    let value = this.get("lastFastBidLandedTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set lastFastBidLandedTimestamp(value: i32) {
    this.set("lastFastBidLandedTimestamp", Value.fromI32(value));
  }

  get bundles(): RelayFlashBidLoader {
    return new RelayFlashBidLoader(
      "Searcher",
      this.get("id")!
        .toBytes()
        .toHexString(),
      "bundles"
    );
  }

  get bundlesWithRefund(): RelayFlashBidWithRefundLoader {
    return new RelayFlashBidWithRefundLoader(
      "Searcher",
      this.get("id")!
        .toBytes()
        .toHexString(),
      "bundlesWithRefund"
    );
  }

  get fastBids(): RelayFastBidLoader {
    return new RelayFastBidLoader(
      "Searcher",
      this.get("id")!
        .toBytes()
        .toHexString(),
      "fastBids"
    );
  }
}

export class Validator extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Validator entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type Validator must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Validator", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): Validator | null {
    return changetype<Validator | null>(
      store.get_in_block("Validator", id.toHexString())
    );
  }

  static load(id: Bytes): Validator | null {
    return changetype<Validator | null>(
      store.get("Validator", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get address(): Bytes {
    let value = this.get("address");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set address(value: Bytes) {
    this.set("address", Value.fromBytes(value));
  }

  get totalTips(): BigInt {
    let value = this.get("totalTips");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalTips(value: BigInt) {
    this.set("totalTips", Value.fromBigInt(value));
  }

  get totalBundlesTips(): BigInt {
    let value = this.get("totalBundlesTips");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalBundlesTips(value: BigInt) {
    this.set("totalBundlesTips", Value.fromBigInt(value));
  }

  get totalBundlesWithRefundTips(): BigInt {
    let value = this.get("totalBundlesWithRefundTips");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalBundlesWithRefundTips(value: BigInt) {
    this.set("totalBundlesWithRefundTips", Value.fromBigInt(value));
  }

  get totalFastBidsTips(): BigInt {
    let value = this.get("totalFastBidsTips");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalFastBidsTips(value: BigInt) {
    this.set("totalFastBidsTips", Value.fromBigInt(value));
  }

  get totalExecutedBundlesCount(): BigInt {
    let value = this.get("totalExecutedBundlesCount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalExecutedBundlesCount(value: BigInt) {
    this.set("totalExecutedBundlesCount", Value.fromBigInt(value));
  }

  get totalExecutedBundlesWithRefundCount(): BigInt {
    let value = this.get("totalExecutedBundlesWithRefundCount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalExecutedBundlesWithRefundCount(value: BigInt) {
    this.set("totalExecutedBundlesWithRefundCount", Value.fromBigInt(value));
  }

  get totalExecutedFastBidsCount(): BigInt {
    let value = this.get("totalExecutedFastBidsCount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalExecutedFastBidsCount(value: BigInt) {
    this.set("totalExecutedFastBidsCount", Value.fromBigInt(value));
  }

  get lastBundleReceivedTimestamp(): i32 {
    let value = this.get("lastBundleReceivedTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set lastBundleReceivedTimestamp(value: i32) {
    this.set("lastBundleReceivedTimestamp", Value.fromI32(value));
  }

  get lastBundleWithRefundReceivedTimestamp(): i32 {
    let value = this.get("lastBundleWithRefundReceivedTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set lastBundleWithRefundReceivedTimestamp(value: i32) {
    this.set("lastBundleWithRefundReceivedTimestamp", Value.fromI32(value));
  }

  get lastFastBidReceivedTimestamp(): i32 {
    let value = this.get("lastFastBidReceivedTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set lastFastBidReceivedTimestamp(value: i32) {
    this.set("lastFastBidReceivedTimestamp", Value.fromI32(value));
  }

  get hourlyValidatorSnapshot(): HourlyValidatorSnapshotLoader {
    return new HourlyValidatorSnapshotLoader(
      "Validator",
      this.get("id")!
        .toBytes()
        .toHexString(),
      "hourlyValidatorSnapshot"
    );
  }

  get dailyValidatorSnapshot(): DailyValidatorSnapshotLoader {
    return new DailyValidatorSnapshotLoader(
      "Validator",
      this.get("id")!
        .toBytes()
        .toHexString(),
      "dailyValidatorSnapshot"
    );
  }

  get weeklyValidatorSnapshot(): WeeklyValidatorSnapshotLoader {
    return new WeeklyValidatorSnapshotLoader(
      "Validator",
      this.get("id")!
        .toBytes()
        .toHexString(),
      "weeklyValidatorSnapshot"
    );
  }

  get bundles(): RelayFlashBidLoader {
    return new RelayFlashBidLoader(
      "Validator",
      this.get("id")!
        .toBytes()
        .toHexString(),
      "bundles"
    );
  }

  get bundlesWithRefund(): RelayFlashBidWithRefundLoader {
    return new RelayFlashBidWithRefundLoader(
      "Validator",
      this.get("id")!
        .toBytes()
        .toHexString(),
      "bundlesWithRefund"
    );
  }

  get fastBids(): RelayFastBidLoader {
    return new RelayFastBidLoader(
      "Validator",
      this.get("id")!
        .toBytes()
        .toHexString(),
      "fastBids"
    );
  }
}

export class RelayFastBid extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save RelayFastBid entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type RelayFastBid must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("RelayFastBid", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): RelayFastBid | null {
    return changetype<RelayFastBid | null>(
      store.get_in_block("RelayFastBid", id.toHexString())
    );
  }

  static load(id: Bytes): RelayFastBid | null {
    return changetype<RelayFastBid | null>(
      store.get("RelayFastBid", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get sender(): Bytes {
    let value = this.get("sender");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set sender(value: Bytes) {
    this.set("sender", Value.fromBytes(value));
  }

  get validator(): Bytes {
    let value = this.get("validator");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set validator(value: Bytes) {
    this.set("validator", Value.fromBytes(value));
  }

  get success(): boolean {
    let value = this.get("success");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set success(value: boolean) {
    this.set("success", Value.fromBoolean(value));
  }

  get bidAmount(): BigInt {
    let value = this.get("bidAmount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set bidAmount(value: BigInt) {
    this.set("bidAmount", Value.fromBigInt(value));
  }

  get searcherContractAddress(): Bytes {
    let value = this.get("searcherContractAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set searcherContractAddress(value: Bytes) {
    this.set("searcherContractAddress", Value.fromBytes(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class RelayFlashBid extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save RelayFlashBid entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type RelayFlashBid must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("RelayFlashBid", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): RelayFlashBid | null {
    return changetype<RelayFlashBid | null>(
      store.get_in_block("RelayFlashBid", id.toHexString())
    );
  }

  static load(id: Bytes): RelayFlashBid | null {
    return changetype<RelayFlashBid | null>(
      store.get("RelayFlashBid", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get sender(): Bytes {
    let value = this.get("sender");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set sender(value: Bytes) {
    this.set("sender", Value.fromBytes(value));
  }

  get oppTxHash(): Bytes {
    let value = this.get("oppTxHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set oppTxHash(value: Bytes) {
    this.set("oppTxHash", Value.fromBytes(value));
  }

  get validator(): Bytes {
    let value = this.get("validator");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set validator(value: Bytes) {
    this.set("validator", Value.fromBytes(value));
  }

  get bidAmount(): BigInt {
    let value = this.get("bidAmount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set bidAmount(value: BigInt) {
    this.set("bidAmount", Value.fromBigInt(value));
  }

  get amountPaid(): BigInt {
    let value = this.get("amountPaid");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set amountPaid(value: BigInt) {
    this.set("amountPaid", Value.fromBigInt(value));
  }

  get searcherContractAddress(): Bytes {
    let value = this.get("searcherContractAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set searcherContractAddress(value: Bytes) {
    this.set("searcherContractAddress", Value.fromBytes(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class RelayFlashBidWithRefund extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save RelayFlashBidWithRefund entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type RelayFlashBidWithRefund must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("RelayFlashBidWithRefund", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): RelayFlashBidWithRefund | null {
    return changetype<RelayFlashBidWithRefund | null>(
      store.get_in_block("RelayFlashBidWithRefund", id.toHexString())
    );
  }

  static load(id: Bytes): RelayFlashBidWithRefund | null {
    return changetype<RelayFlashBidWithRefund | null>(
      store.get("RelayFlashBidWithRefund", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get sender(): Bytes {
    let value = this.get("sender");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set sender(value: Bytes) {
    this.set("sender", Value.fromBytes(value));
  }

  get oppTxHash(): Bytes {
    let value = this.get("oppTxHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set oppTxHash(value: Bytes) {
    this.set("oppTxHash", Value.fromBytes(value));
  }

  get validator(): Bytes {
    let value = this.get("validator");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set validator(value: Bytes) {
    this.set("validator", Value.fromBytes(value));
  }

  get bidAmount(): BigInt {
    let value = this.get("bidAmount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set bidAmount(value: BigInt) {
    this.set("bidAmount", Value.fromBigInt(value));
  }

  get amountPaid(): BigInt {
    let value = this.get("amountPaid");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set amountPaid(value: BigInt) {
    this.set("amountPaid", Value.fromBigInt(value));
  }

  get searcherContractAddress(): Bytes {
    let value = this.get("searcherContractAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set searcherContractAddress(value: Bytes) {
    this.set("searcherContractAddress", Value.fromBytes(value));
  }

  get refundedAmount(): BigInt {
    let value = this.get("refundedAmount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set refundedAmount(value: BigInt) {
    this.set("refundedAmount", Value.fromBigInt(value));
  }

  get refundAddress(): Bytes {
    let value = this.get("refundAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set refundAddress(value: Bytes) {
    this.set("refundAddress", Value.fromBytes(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class RelayProcessingPaidValidator extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save RelayProcessingPaidValidator entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type RelayProcessingPaidValidator must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set(
        "RelayProcessingPaidValidator",
        id.toBytes().toHexString(),
        this
      );
    }
  }

  static loadInBlock(id: Bytes): RelayProcessingPaidValidator | null {
    return changetype<RelayProcessingPaidValidator | null>(
      store.get_in_block("RelayProcessingPaidValidator", id.toHexString())
    );
  }

  static load(id: Bytes): RelayProcessingPaidValidator | null {
    return changetype<RelayProcessingPaidValidator | null>(
      store.get("RelayProcessingPaidValidator", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get validator(): Bytes {
    let value = this.get("validator");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set validator(value: Bytes) {
    this.set("validator", Value.fromBytes(value));
  }

  get validatorPayment(): BigInt {
    let value = this.get("validatorPayment");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set validatorPayment(value: BigInt) {
    this.set("validatorPayment", Value.fromBigInt(value));
  }

  get initiator(): Bytes {
    let value = this.get("initiator");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set initiator(value: Bytes) {
    this.set("initiator", Value.fromBytes(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class CustomPaymentProcessorPaid extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save CustomPaymentProcessorPaid entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type CustomPaymentProcessorPaid must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("CustomPaymentProcessorPaid", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): CustomPaymentProcessorPaid | null {
    return changetype<CustomPaymentProcessorPaid | null>(
      store.get_in_block("CustomPaymentProcessorPaid", id.toHexString())
    );
  }

  static load(id: Bytes): CustomPaymentProcessorPaid | null {
    return changetype<CustomPaymentProcessorPaid | null>(
      store.get("CustomPaymentProcessorPaid", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get payor(): Bytes {
    let value = this.get("payor");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set payor(value: Bytes) {
    this.set("payor", Value.fromBytes(value));
  }

  get payee(): Bytes {
    let value = this.get("payee");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set payee(value: Bytes) {
    this.set("payee", Value.fromBytes(value));
  }

  get paymentProcessor(): Bytes {
    let value = this.get("paymentProcessor");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set paymentProcessor(value: Bytes) {
    this.set("paymentProcessor", Value.fromBytes(value));
  }

  get totalAmount(): BigInt {
    let value = this.get("totalAmount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalAmount(value: BigInt) {
    this.set("totalAmount", Value.fromBigInt(value));
  }

  get startBlock(): BigInt {
    let value = this.get("startBlock");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set startBlock(value: BigInt) {
    this.set("startBlock", Value.fromBigInt(value));
  }

  get endBlock(): BigInt {
    let value = this.get("endBlock");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endBlock(value: BigInt) {
    this.set("endBlock", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class HourlyCollectionSnapshotGlobalLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): HourlyCollectionSnapshotGlobal[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<HourlyCollectionSnapshotGlobal[]>(value);
  }
}

export class DailyCollectionSnapshotGlobalLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): DailyCollectionSnapshotGlobal[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<DailyCollectionSnapshotGlobal[]>(value);
  }
}

export class WeeklyCollectionSnapshotGlobalLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): WeeklyCollectionSnapshotGlobal[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<WeeklyCollectionSnapshotGlobal[]>(value);
  }
}

export class RelayFlashBidLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): RelayFlashBid[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<RelayFlashBid[]>(value);
  }
}

export class RelayFlashBidWithRefundLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): RelayFlashBidWithRefund[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<RelayFlashBidWithRefund[]>(value);
  }
}

export class RelayFastBidLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): RelayFastBid[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<RelayFastBid[]>(value);
  }
}

export class HourlyValidatorSnapshotLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): HourlyValidatorSnapshot[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<HourlyValidatorSnapshot[]>(value);
  }
}

export class DailyValidatorSnapshotLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): DailyValidatorSnapshot[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<DailyValidatorSnapshot[]>(value);
  }
}

export class WeeklyValidatorSnapshotLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): WeeklyValidatorSnapshot[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<WeeklyValidatorSnapshot[]>(value);
  }
}
